# Quantum Coin Flip - True Randomness from Superposition

A demonstration of quantum superposition using Qiskit to create a truly random coin flip.

## 🎯 What This Demonstrates

- **Quantum Superposition**: A qubit exists in both |0⟩ and |1⟩ states simultaneously
- **Hadamard Gate (H)**: Creates equal superposition (50% |0⟩, 50% |1⟩)
- **Measurement Collapse**: Observing the qubit forces it into a definite state
- **True Randomness**: Unlike classical pseudorandom generators, this uses quantum mechanics for genuine randomness

## 🔬 The Science

Classical computers generate "pseudorandom" numbers using deterministic algorithms. Quantum randomness is fundamentally different - it comes from the probabilistic nature of quantum mechanics itself.

### The Circuit
```
     ┌───┐┌─┐
q_0: ┤ H ├┤M├
     └───┘└╥┘
c: 1/══════╩═
           0
```

1. **Initial state**: |0⟩ (qubit starts at 0)
2. **Hadamard gate**: Creates superposition → (|0⟩ + |1⟩)/√2
3. **Measurement**: Collapses to either |0⟩ or |1⟩ with 50% probability each

## 📊 Results

Running 1000 coin flips produces approximately:
- **Heads (0)**: ~500 (50%)
- **Tails (1)**: ~500 (50%)

![Quantum Coin Flip Results](quantum_coin.png)

## 🛠️ Technologies Used

- **Qiskit 1.x** - IBM's quantum computing framework
- **Qiskit Aer** - High-performance quantum circuit simulator
- **Python 3.x**
- **Matplotlib** - Data visualization

## 🚀 How to Run

### Prerequisites
```bash
pip install qiskit qiskit-aer matplotlib
```

### Execute
```bash
python quantum_coin_flip.py
```

## 💻 Code Explanation
```python
# Create quantum circuit: 1 qubit, 1 classical bit
qc = QuantumCircuit(1, 1)

# Apply Hadamard gate - creates superposition
qc.h(0)

# Measure the qubit
qc.measure(0, 0)

# Simulate 1000 times
sim = AerSimulator()
job = sim.run(qc, shots=1000)
```

**Key Concepts:**
- `QuantumCircuit(1, 1)`: 1 quantum bit + 1 classical bit for storing result
- `qc.h(0)`: Hadamard gate on qubit 0 - THE quantum operation
- `qc.measure(0, 0)`: Measure qubit 0, store in classical bit 0
- `shots=1000`: Run the circuit 1000 times to see the probability distribution

## 🎓 What I Learned

1. **Superposition is real**: A qubit can genuinely be in multiple states at once
2. **Measurement matters**: The act of measuring changes the quantum state
3. **Quantum gates**: Hadamard (H) is the simplest gate for creating superposition
4. **Quantum circuits**: How to build and simulate basic quantum algorithms
5. **Probability distributions**: Quantum outcomes are probabilistic, not deterministic

## 🔮 Real-World Applications

True quantum randomness has practical uses in:
- **Cryptography**: Generating unbreakable encryption keys
- **Monte Carlo Simulations**: Better sampling for financial modeling
- **Gaming**: Provably fair random number generation
- **Scientific Research**: Eliminating bias in experimental design

## 📈 Next Steps

- [ ] Experiment with different numbers of measurements (shots)
- [ ] Try multiple qubits for multi-sided dice
- [ ] Explore other quantum gates (X, Y, Z, RX, RY, RZ)
- [ ] Build quantum entanglement demo (Bell states)
- [ ] Apply to Monte Carlo portfolio optimization

## 📚 Resources

- [Qiskit Documentation](https://qiskit.org/documentation/)
- [IBM Quantum Learning](https://learning.quantum.ibm.com/)
- [Quantum Computing for the Very Curious](https://quantum.country/)
- [Qiskit Textbook - Single Qubit Gates](https://qiskit.org/textbook/ch-states/single-qubit-gates.html)



